# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from brl_pxh_api/JointGroupRadsGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointGroupRadsGoal(genpy.Message):
  _md5sum = "a60ad48bfbf8b530fe8dd3f8c58bce45"
  _type = "brl_pxh_api/JointGroupRadsGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
float32[] joint_positions
float32 moving_time
float32 accel_time
bool blocking
"""
  __slots__ = ['joint_positions','moving_time','accel_time','blocking']
  _slot_types = ['float32[]','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_positions,moving_time,accel_time,blocking

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointGroupRadsGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_positions is None:
        self.joint_positions = []
      if self.moving_time is None:
        self.moving_time = 0.
      if self.accel_time is None:
        self.accel_time = 0.
      if self.blocking is None:
        self.blocking = False
    else:
      self.joint_positions = []
      self.moving_time = 0.
      self.accel_time = 0.
      self.blocking = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.joint_positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_positions))
      _x = self
      buff.write(_get_struct_2fB().pack(_x.moving_time, _x.accel_time, _x.blocking))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_positions = s.unpack(str[start:end])
      _x = self
      start = end
      end += 9
      (_x.moving_time, _x.accel_time, _x.blocking,) = _get_struct_2fB().unpack(str[start:end])
      self.blocking = bool(self.blocking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.joint_positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.joint_positions.tostring())
      _x = self
      buff.write(_get_struct_2fB().pack(_x.moving_time, _x.accel_time, _x.blocking))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_positions = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 9
      (_x.moving_time, _x.accel_time, _x.blocking,) = _get_struct_2fB().unpack(str[start:end])
      self.blocking = bool(self.blocking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fB = None
def _get_struct_2fB():
    global _struct_2fB
    if _struct_2fB is None:
        _struct_2fB = struct.Struct("<2fB")
    return _struct_2fB
