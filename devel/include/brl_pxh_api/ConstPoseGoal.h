// Generated by gencpp from file brl_pxh_api/ConstPoseGoal.msg
// DO NOT EDIT!


#ifndef BRL_PXH_API_MESSAGE_CONSTPOSEGOAL_H
#define BRL_PXH_API_MESSAGE_CONSTPOSEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace brl_pxh_api
{
template <class ContainerAllocator>
struct ConstPoseGoal_
{
  typedef ConstPoseGoal_<ContainerAllocator> Type;

  ConstPoseGoal_()
    : moving_time(0.0)  {
    }
  ConstPoseGoal_(const ContainerAllocator& _alloc)
    : moving_time(0.0)  {
  (void)_alloc;
    }



   typedef float _moving_time_type;
  _moving_time_type moving_time;





  typedef boost::shared_ptr< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ConstPoseGoal_

typedef ::brl_pxh_api::ConstPoseGoal_<std::allocator<void> > ConstPoseGoal;

typedef boost::shared_ptr< ::brl_pxh_api::ConstPoseGoal > ConstPoseGoalPtr;
typedef boost::shared_ptr< ::brl_pxh_api::ConstPoseGoal const> ConstPoseGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator1> & lhs, const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator2> & rhs)
{
  return lhs.moving_time == rhs.moving_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator1> & lhs, const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brl_pxh_api

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "111da1849bb8c0b990e33aba3fa0e62c";
  }

  static const char* value(const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x111da1849bb8c0b9ULL;
  static const uint64_t static_value2 = 0x90e33aba3fa0e62cULL;
};

template<class ContainerAllocator>
struct DataType< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brl_pxh_api/ConstPoseGoal";
  }

  static const char* value(const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"float32 moving_time\n"
;
  }

  static const char* value(const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.moving_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConstPoseGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brl_pxh_api::ConstPoseGoal_<ContainerAllocator>& v)
  {
    s << indent << "moving_time: ";
    Printer<float>::stream(s, indent + "  ", v.moving_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRL_PXH_API_MESSAGE_CONSTPOSEGOAL_H
