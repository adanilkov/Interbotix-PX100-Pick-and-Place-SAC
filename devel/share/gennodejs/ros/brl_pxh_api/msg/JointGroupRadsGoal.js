// Auto-generated. Do not edit!

// (in-package brl_pxh_api.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class JointGroupRadsGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.joint_positions = null;
      this.moving_time = null;
      this.accel_time = null;
      this.blocking = null;
    }
    else {
      if (initObj.hasOwnProperty('joint_positions')) {
        this.joint_positions = initObj.joint_positions
      }
      else {
        this.joint_positions = [];
      }
      if (initObj.hasOwnProperty('moving_time')) {
        this.moving_time = initObj.moving_time
      }
      else {
        this.moving_time = 0.0;
      }
      if (initObj.hasOwnProperty('accel_time')) {
        this.accel_time = initObj.accel_time
      }
      else {
        this.accel_time = 0.0;
      }
      if (initObj.hasOwnProperty('blocking')) {
        this.blocking = initObj.blocking
      }
      else {
        this.blocking = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type JointGroupRadsGoal
    // Serialize message field [joint_positions]
    bufferOffset = _arraySerializer.float32(obj.joint_positions, buffer, bufferOffset, null);
    // Serialize message field [moving_time]
    bufferOffset = _serializer.float32(obj.moving_time, buffer, bufferOffset);
    // Serialize message field [accel_time]
    bufferOffset = _serializer.float32(obj.accel_time, buffer, bufferOffset);
    // Serialize message field [blocking]
    bufferOffset = _serializer.bool(obj.blocking, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type JointGroupRadsGoal
    let len;
    let data = new JointGroupRadsGoal(null);
    // Deserialize message field [joint_positions]
    data.joint_positions = _arrayDeserializer.float32(buffer, bufferOffset, null)
    // Deserialize message field [moving_time]
    data.moving_time = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [accel_time]
    data.accel_time = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [blocking]
    data.blocking = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 4 * object.joint_positions.length;
    return length + 13;
  }

  static datatype() {
    // Returns string type for a message object
    return 'brl_pxh_api/JointGroupRadsGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a60ad48bfbf8b530fe8dd3f8c58bce45';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Goal
    float32[] joint_positions
    float32 moving_time
    float32 accel_time
    bool blocking
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new JointGroupRadsGoal(null);
    if (msg.joint_positions !== undefined) {
      resolved.joint_positions = msg.joint_positions;
    }
    else {
      resolved.joint_positions = []
    }

    if (msg.moving_time !== undefined) {
      resolved.moving_time = msg.moving_time;
    }
    else {
      resolved.moving_time = 0.0
    }

    if (msg.accel_time !== undefined) {
      resolved.accel_time = msg.accel_time;
    }
    else {
      resolved.accel_time = 0.0
    }

    if (msg.blocking !== undefined) {
      resolved.blocking = msg.blocking;
    }
    else {
      resolved.blocking = false
    }

    return resolved;
    }
};

module.exports = JointGroupRadsGoal;
