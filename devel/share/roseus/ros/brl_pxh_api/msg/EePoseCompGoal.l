;; Auto-generated. Do not edit!


(when (boundp 'brl_pxh_api::EePoseCompGoal)
  (if (not (find-package "BRL_PXH_API"))
    (make-package "BRL_PXH_API"))
  (shadow 'EePoseCompGoal (find-package "BRL_PXH_API")))
(unless (find-package "BRL_PXH_API::EEPOSECOMPGOAL")
  (make-package "BRL_PXH_API::EEPOSECOMPGOAL"))

(in-package "ROS")
;;//! \htmlinclude EePoseCompGoal.msg.html


(defclass brl_pxh_api::EePoseCompGoal
  :super ros::object
  :slots (_x _z _roll _pitch _execute _moving_time _accel_time _blocking ))

(defmethod brl_pxh_api::EePoseCompGoal
  (:init
   (&key
    ((:x __x) 0.0)
    ((:z __z) 0.0)
    ((:roll __roll) 0.0)
    ((:pitch __pitch) 0.0)
    ((:execute __execute) nil)
    ((:moving_time __moving_time) 0.0)
    ((:accel_time __accel_time) 0.0)
    ((:blocking __blocking) nil)
    )
   (send-super :init)
   (setq _x (float __x))
   (setq _z (float __z))
   (setq _roll (float __roll))
   (setq _pitch (float __pitch))
   (setq _execute __execute)
   (setq _moving_time (float __moving_time))
   (setq _accel_time (float __accel_time))
   (setq _blocking __blocking)
   self)
  (:x
   (&optional __x)
   (if __x (setq _x __x)) _x)
  (:z
   (&optional __z)
   (if __z (setq _z __z)) _z)
  (:roll
   (&optional __roll)
   (if __roll (setq _roll __roll)) _roll)
  (:pitch
   (&optional __pitch)
   (if __pitch (setq _pitch __pitch)) _pitch)
  (:execute
   (&optional (__execute :null))
   (if (not (eq __execute :null)) (setq _execute __execute)) _execute)
  (:moving_time
   (&optional __moving_time)
   (if __moving_time (setq _moving_time __moving_time)) _moving_time)
  (:accel_time
   (&optional __accel_time)
   (if __accel_time (setq _accel_time __accel_time)) _accel_time)
  (:blocking
   (&optional (__blocking :null))
   (if (not (eq __blocking :null)) (setq _blocking __blocking)) _blocking)
  (:serialization-length
   ()
   (+
    ;; float32 _x
    4
    ;; float32 _z
    4
    ;; float32 _roll
    4
    ;; float32 _pitch
    4
    ;; bool _execute
    1
    ;; float32 _moving_time
    4
    ;; float32 _accel_time
    4
    ;; bool _blocking
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32 _x
       (sys::poke _x (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _z
       (sys::poke _z (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _roll
       (sys::poke _roll (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _pitch
       (sys::poke _pitch (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; bool _execute
       (if _execute (write-byte -1 s) (write-byte 0 s))
     ;; float32 _moving_time
       (sys::poke _moving_time (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _accel_time
       (sys::poke _accel_time (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; bool _blocking
       (if _blocking (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32 _x
     (setq _x (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _z
     (setq _z (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _roll
     (setq _roll (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _pitch
     (setq _pitch (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; bool _execute
     (setq _execute (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; float32 _moving_time
     (setq _moving_time (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _accel_time
     (setq _accel_time (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; bool _blocking
     (setq _blocking (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get brl_pxh_api::EePoseCompGoal :md5sum-) "7d4193829330657a5eee6b3438daef12")
(setf (get brl_pxh_api::EePoseCompGoal :datatype-) "brl_pxh_api/EePoseCompGoal")
(setf (get brl_pxh_api::EePoseCompGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
float32 x
float32 z
float32 roll
float32 pitch
bool execute
float32 moving_time
float32 accel_time 
bool blocking

")



(provide :brl_pxh_api/EePoseCompGoal "7d4193829330657a5eee6b3438daef12")


